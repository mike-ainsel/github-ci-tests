name: "[A] templates/jinja"

on:
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - id: test1
        uses: milaboratory/github-ci/actions/templates/jinja@v1-beta
        with:
          template: |
            Some template:
              - var1: '{{ var1 }}'
              - var2: '{{ var2 }}'
          data: |
            {"var1": "value of var 1"}
          variables: var2=value of var 2

      - id: prepare-test2
        shell: bash
        run: |
          cat >my-test2-template.j2 <<EndOfTemplate
          env substitution: '{{ env.get('SOME_TPL_VAR', '') }}'
          EndOfTemplate
      - id: test2
        uses: milaboratory/github-ci/actions/templates/jinja@v1-beta
        env:
          SOME_TPL_VAR: 'value from test 2'
        with:
          template-file: my-test2-template.j2

      - id: prepare-test3
        shell: bash
        run: |
          cat >test3-template.j2 <<EndOfTemplate
          data substitution: '{{ somevar }}'
          EndOfTemplate

          cat >test3-data.yaml <<EndOfTemplate
          somevar: value from test 3
          EndOfTemplate
      - id: test3
        uses: milaboratory/github-ci/actions/templates/jinja@v1-beta
        with:
          template-file: test3-template.j2
          data-file: test3-data.yaml

      - id: test4
        uses: milaboratory/github-ci/actions/templates/jinja@v1-beta
        with:
          template: static text with no vars
          out-file: template-output.txt

    outputs:
      test1: ${{ steps.test1.outputs.data }}
      test2: ${{ steps.test2.outputs.data }}
      test3: ${{ steps.test3.outputs.data }}
      test4: ${{ steps.test4.outputs.out-file }}

  check:
    runs-on: ubuntu-latest
    needs:
      - tests

    steps:
      - name: Test output
        uses: milaboratory/github-ci/actions/shell@v1
        env:
          TEST1_DATA: ${{ needs.tests.outputs.test1 }}
          TEST2_DATA: ${{ needs.tests.outputs.test2 }}
          TEST3_DATA: ${{ needs.tests.outputs.test3 }}
          TEST4_PATH: ${{ needs.tests.outputs.test4 }}
        with:
          dump-stdout: false
          run: |
            # Check templates rendered what we expected

            function equals() {
              local _test_name="${1}"
              local _expected="${2}"
              local _actual="${3}"

              if [ "${_expected}" != "${_actual}" ]; then
                ghwa_error "(${_test_name}) wrong test result:
                  expected:
            ${_expected}

                  actual:
            ${_actual}"

                exit 1
              fi
            }

            equals "Test 1" \
              "Some template:
              - var1: 'value of var 1'
              - var2: 'value of var 2'" \
              "${TEST1_DATA}"

            equals "Test 2" \
              "env substitution: 'value from test 2'" \
              "${TEST2_DATA}"

            equals "Test 3" \
              "data substitution: 'value from test 3'" \
              "${TEST3_DATA}"

            equals "Test 4" \
              "template-output.txt" \
              "${TEST4_PATH}"
